message("####### Start R05 (by cluster): ", Sys.time())
# Open packages necessary for analysis.
library(tidyverse)
library(Seurat)
library(DESeq2)
library(colorRamps)
library(viridis)
library(lmerTest)
library(pheatmap)
library(clusterProfiler)
library(DOSE)
library(org.Hs.eg.db)
# define output folder
out_dir = "./output/"
if (!dir.exists(out_dir)) {dir.create(out_dir)}
out_dir2 = "./output/"
if (!dir.exists(out_dir2)) {dir.create(out_dir2)}
#load group and file info
gr_tab = read_csv("input/group_tab_rcs.csv")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
files <- list.files(path="./outputPDFs/DiffExpOut/Significant Genes", pattern="*.csv", full.names=TRUE, recursive=FALSE)
for (file in files){
print(file)
sigs <- read.csv(file)
row.names(sigs) <- sigs$X
sigs
positiveGenes <- rownames(sigs[sigs$log2FoldChange > 0,])
negativeGenes <- rownames(sigs[sigs$log2FoldChange < 0,])
if(!is.null(negativeGenes)){
if(length(negativeGenes) > 10){
csvFileName = (as.vector(strsplit(file, '[/]'))[[1]][5])
outputCSVFileName = paste0("./outputPDFs/DiffExpOut/GeneOntologyR/",
paste0(as.vector(strsplit(csvFileName, '[.]'))[[1]][1], "Negative.csv"))
outputPDFFileName = paste0("./outputPDFs/DiffExpOut/GeneOntologyR/",
paste0(as.vector(strsplit(csvFileName, '[.]'))[[1]][1], "Negative.pdf"))
print(negativeGenes)
GO_results <- enrichGO(gene = negativeGenes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
print(GO_results)
if(!is.null(GO_results)){
negativeResults = as.data.frame(GO_results)
if(nrow(negativeResults)>0){
print(nrow(negativeResults))
write.csv(negativeResults,outputCSVFileName, row.names = FALSE)
fit <- plot(barplot(GO_results, showCategory = 15))
pdf(outputPDFFileName)
print(fit)
dev.off()
}
}
}
}
if(!is.null(positiveGenes)){
if(length(positiveGenes) > 10){
csvFileName = (as.vector(strsplit(file, '[/]'))[[1]][5])
outputCSVFileName = paste0("./outputPDFs/DiffExpOut/GeneOntologyR/",
paste0(as.vector(strsplit(csvFileName, '[.]'))[[1]][1], "positive.csv"))
outputPDFFileName = paste0("./outputPDFs/DiffExpOut/GeneOntologyR/",
paste0(as.vector(strsplit(csvFileName, '[.]'))[[1]][1], "positive.pdf"))
print(positiveGenes)
GO_results <- enrichGO(gene = positiveGenes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
print(GO_results)
if(!is.null(GO_results)){
positiveResults = as.data.frame(GO_results)
if(nrow(positiveResults)>0){
write.csv(positiveResults,outputCSVFileName, row.names = FALSE)
fit <- plot(barplot(GO_results, showCategory = 15))
pdf(outputPDFFileName) # width = 1400, height = 1800
print(fit)
dev.off()
}
}
}
}
}
### analyse differential abundance and gene expression by cell class (DESeq2 pseudobulk analysis)
#       also plot UMAP etc with cluster and cell class labels
message("####### Start R05 (by cluster): ", Sys.time())
# Open packages necessary for analysis.
library(tidyverse)
library(Seurat)
library(DESeq2)
library(colorRamps)
library(viridis)
library(lmerTest)
library(pheatmap)
library(clusterProfiler)
# library(DOSE)
library(org.Hs.eg.db)
# define output folder
out_dir = "./output/"
if (!dir.exists(out_dir)) {dir.create(out_dir)}
out_dir2 = "./output/"
if (!dir.exists(out_dir2)) {dir.create(out_dir2)}
#load group and file info
gr_tab = read_csv("input/group_tab_rcs.csv")
install.packages("rjson")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library("rjson")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library("rjson")
myData <- fromJSON(file="./一Hotspot Analysis/significantResults/40genes/modulesSignificantGenesDictionary.json")
myData
for (i in myData) {
print(i)
}
for (module in myData) {
print("New Module")
print(module)
}
i = 1
for (module in myData) {
csvFileName = paste0("GOmodule", as.character(i))
outputCSVFileName = paste0("./一Hotspot Analysis/significantResults/40genes/",
paste0(csvFileName, ".csv"))
outputPDFFileName = paste0("./一Hotspot Analysis/significantResults/40genes/",
paste0(csvFileName, ".pdf"))
GO_results <- enrichGO(gene = module, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
if(!is.null(GO_results)){
negativeResults = as.data.frame(GO_results)
if(nrow(negativeResults)>0){
print(nrow(negativeResults))
write.csv(negativeResults,outputCSVFileName, row.names = FALSE)
fit <- plot(barplot(GO_results, showCategory = 15))
pdf(outputPDFFileName)
print(fit)
dev.off()
}
}
i = i + 1
}
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("clusterProfiler")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("AnnotationDbi")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library("rjson")
myData <- fromJSON(file="./一Hotspot Analysis/significantResults/40genes/modulesSignificantGenesDictionary.json")
myData
i = 1
for (module in myData) {
csvFileName = paste0("GOmodule", as.character(i))
outputCSVFileName = paste0("./一Hotspot Analysis/significantResults/40genes/",
paste0(csvFileName, ".csv"))
outputPDFFileName = paste0("./一Hotspot Analysis/significantResults/40genes/",
paste0(csvFileName, ".pdf"))
GO_results <- enrichGO(gene = module, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
if(!is.null(GO_results)){
negativeResults = as.data.frame(GO_results)
if(nrow(negativeResults)>0){
print(nrow(negativeResults))
write.csv(negativeResults,outputCSVFileName, row.names = FALSE)
fit <- plot(barplot(GO_results, showCategory = 15))
pdf(outputPDFFileName)
print(fit)
dev.off()
}
}
i = i + 1
}
GO_results
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library("rjson")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
library("rjson")
myData <- fromJSON(file="./一Hotspot Analysis/significantResults/40genes/modulesSignificantGenesDictionary.json")
myData
i = 1
for (module in myData) {
csvFileName = paste0("GOmodule", as.character(i))
outputCSVFileName = paste0("./一Hotspot Analysis/significantResults/40genes/",
paste0(csvFileName, ".csv"))
outputPDFFileName = paste0("./一Hotspot Analysis/significantResults/40genes/",
paste0(csvFileName, ".pdf"))
GO_results <- enrichGO(gene = module, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
if(!is.null(GO_results)){
negativeResults = as.data.frame(GO_results)
if(nrow(negativeResults)>0){
print(nrow(negativeResults))
write.csv(negativeResults,outputCSVFileName, row.names = FALSE)
fit <- plot(barplot(GO_results, showCategory = 15))
pdf(outputPDFFileName)
print(fit)
dev.off()
}
}
i = i + 1
}
GO_results
View(GO_results)
# Open packages necessary for analysis.
library(tidyverse)
library(Seurat)
library(DESeq2)
library(colorRamps)
library(viridis)
library(lmerTest)
library(pheatmap)
library(clusterProfiler)
# library(DOSE)
library(org.Hs.eg.db)
# define output folder
out_dir = "./output/"
if (!dir.exists(out_dir)) {dir.create(out_dir)}
out_dir2 = "./output/"
if (!dir.exists(out_dir2)) {dir.create(out_dir2)}
#load group and file info
gr_tab = read_csv("input/group_tab_rcs.csv")
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeq.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
# Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][1]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
coldata <- data.frame(row.names = colnames(Counts), condition)
coldata
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("DESeq2", force = TRUE)
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeqPerClusterNew.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[.]'))
clusterStrings = firstValues[[1]][2]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
clusters = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][1]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
clusters <- append(clusters, clusterID)
}
clusters = factor(clusters)
clusters
coldata <- data.frame(row.names = colnames(Counts), condition, clusters)
coldata
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeqPerClusterNew.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[.]'))
clusterStrings = firstValues[[1]][2]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
clusters = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][1]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
clusters <- append(clusters, clusterID)
}
clusters = factor(clusters)
clusters
coldata <- data.frame(row.names = colnames(Counts), condition, clusters)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "clusters" "D", "C"))
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "clusters", "D", "C"))
?results
significantGenes = read.csv('./significantGenes/significantGenes-padj<0.05.csv')
significantGenes = read.csv('./significantGenes/significantGenes-padj<0.05.csv')
significantGenes
significantGenes = read.csv('./significantGenes/significantGenes-padj<0.05.csv')
significantGenes$x
significantGenes = read.csv('./significantGenes/significantGenes-padj<0.05.csv')$x
significantGenes
?results
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
samples = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][1]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
samples <- append(samples, clusterID)
}
samples = factor(samples)
samples
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
samples = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][2]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
samples <- append(samples, clusterID)
}
samples = factor(samples)
samples
coldata <- data.frame(row.names = colnames(Counts), condition, clusters)
coldata
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
samples = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][2]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = clusterString
samples <- append(samples, clusterID)
}
samples = factor(samples)
samples
coldata <- data.frame(row.names = colnames(Counts), condition, clusters, samples)
coldata
coldata <- data.frame(row.names = colnames(Counts), condition, samples)
coldata
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
significantGenes = read.csv('./significantGenes/significantGenes-padj<0.05.csv')$x
Counts = read.delim("./output/rawCountsDESeqPerClusterNew.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[.]'))
clusterStrings = firstValues[[1]][2]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
clusters = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][1]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
clusters <- append(clusters, clusterID)
}
clusters = factor(clusters)
clusters
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
samples = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][2]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = clusterString
samples <- append(samples, clusterID)
}
samples = factor(samples)
samples
coldata <- data.frame(row.names = colnames(Counts), condition, samples)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~samples+condition)
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~samples+condition)
vignette('DESeq2')
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~samples+condition)
coldata <- data.frame(row.names = colnames(Counts), condition, samples)
coldata
coldata <- data.frame(row.names = colnames(Counts), condition, batch)
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
batch = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][2]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = clusterString
batch <- append(batch, clusterID)
}
batch = factor(batch)
batch
coldata <- data.frame(row.names = colnames(Counts), condition, batch)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~batch+condition)
### analyse differential abundance and gene expression by cell class (DESeq2 pseudobulk analysis)
#       also plot UMAP etc with cluster and cell class labels
message("####### Start R05 (by cluster): ", Sys.time())
# Open packages necessary for analysis.
library(tidyverse)
library(Seurat)
library(DESeq2)
library(colorRamps)
library(viridis)
library(lmerTest)
library(pheatmap)
library(clusterProfiler)
# library(DOSE)
library(org.Hs.eg.db)
# define output folder
out_dir = "./output/"
if (!dir.exists(out_dir)) {dir.create(out_dir)}
out_dir2 = "./output/"
if (!dir.exists(out_dir2)) {dir.create(out_dir2)}
#load group and file info
gr_tab = read_csv("input/group_tab_rcs.csv")
