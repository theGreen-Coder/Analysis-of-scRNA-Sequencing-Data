h<-h1+h2+h3
h
fileOutputPDF = paste0(paste0("./outputPDFs/DiffExpOut/resultsDESeq2_", clusterID), ".pdf")
fileOutputCSV = paste0(paste0("./outputPDFs/DiffExpOut/resultsDESeq2_", clusterID), ".csv")
pdf(file = fileOutputPDF, width = 30, height = 10)
print(h)
dev.off()
print(df.top)
write.csv(df.top,fileOutputCSV)
}
else{
print("Skipped Cluster")
}
fullColData = fullColData[-1:-5, ]
fullCounts = fullCounts[,-1:-5]
i = i+1
# remove(list=c("ha", "h1", "h2", "h3", "h", "l2_val", "mean", "col_logFC", "col_AveExpr", "keepRow", "rlog_out", "mat", "base_mean", "mat.scaled", "dds", "res", "sigs", "df", "df.top"))
}
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("DESeq2", force = TRUE)
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
Counts = read.delim("./output/rawCountsDESeqPerClusterNew.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[.]'))
clusterStrings = firstValues[[1]][2]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
clusters = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][1]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
clusters <- append(clusters, clusterID)
}
clusters = factor(clusters)
clusters
coldata <- data.frame(row.names = colnames(Counts), condition, clusters)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
while(nrow(fullColData) >= 5){
print(nrow(fullColData))
coldata = head(fullColData, 5)
Counts = fullCounts[,1:5]
clusterID = substr(coldata[1, 2][1], 1, 2)
print(clusterID)
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "D", "C"))
sigs = na.omit(res)
sigs = sigs[sigs$padj < 0.05,]
df = as.data.frame(sigs)
df.top = df[(df$padj < 0.05) & (df$baseMean > 30) & (abs(df$log2FoldChange) > 0.3),]
df.top = df.top[order(df.top$log2FoldChange, decreasing = TRUE),]
df.top["symbol"] = row.names(df.top)
rlog_out <- vst(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(df.top), rownames(coldata)] #sig genes x samples
if(isTRUE(mat) && nrow(mat) > 0){
colnames(mat) <- rownames(coldata)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
if(i == 0){
matFull = assay(rlog_out)
matScaledFull = t(apply(matFull, 1, scale))
colnames(matScaledFull)<-colnames(matFull)
} else {
tempMatFull = assay(rlog_out)
tempMatScaledFull = t(apply(tempMatFull, 1, scale))
colnames(tempMatScaledFull)<-colnames(tempMatFull)
matScaledFull = cbind(matScaledFull, tempMatScaledFull)
}
num_keep <- 25
#1 to num_keep len-num_keep to len
keepRow <- 1:nrow(mat.scaled)
if(nrow(mat.scaled) < num_keep*2){
rows_keep = keepRow
} else {
# rows_keep <- c(seq(1:num_keep), seq((nrow(mat.scaled)-num_keep), nrow(mat.scaled)))
rows_keep = c(head(keepRow, num_keep), tail(keepRow, num_keep))
rows_keep
}
l2_val <- as.matrix(df.top[rows_keep,]$log2FoldChange) #getting log2 value for each gene we are keeping
colnames(l2_val)<-"logFC"
mean <- as.matrix(df.top[rows_keep,]$baseMean) #getting mean value for each gene we are keeping
colnames(mean)<-"AveExpr"
#maps values between b/w/r for min and max l2 values
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
#maps between 0% quantile, and 75% quantile of mean values --- 0, 25, 50, 75, 100
col_AveExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2), height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled[rows_keep,], cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = F)
h2 <- Heatmap(l2_val, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(l2_val[i, j],2), x, y)
})
h3 <- Heatmap(mean, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name = "AveExpr", col=col_AveExpr,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(mean[i, j],2), x, y)
})
h<-h1+h2+h3
h
fileOutputPDF = paste0(paste0("./outputPDFs/DiffExpOut/resultsDESeq2_", clusterID), ".pdf")
fileOutputCSV = paste0(paste0("./outputPDFs/DiffExpOut/resultsDESeq2_", clusterID), ".csv")
pdf(file = fileOutputPDF, width = 30, height = 10)
print(h)
dev.off()
print(df.top)
write.csv(df.top,fileOutputCSV)
}
else{
print("Skipped Cluster")
}
fullColData = fullColData[-1:-5, ]
fullCounts = fullCounts[,-1:-5]
i = i+1
# remove(list=c("ha", "h1", "h2", "h3", "h", "l2_val", "mean", "col_logFC", "col_AveExpr", "keepRow", "rlog_out", "mat", "base_mean", "mat.scaled", "dds", "res", "sigs", "df", "df.top"))
}
plot(cars)
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeqPerClusterNew.csv", header = TRUE, row.names = 1, sep = ",")
Counts
Counts = read.delim("./output/rawCountsDESeq.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[.]'))
clusterStrings = firstValues[[1]][2]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][2]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][1]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
# condition <- factor(c("C", "C", "C", "D", "D"))
n_last <- 1
clusters = c()
for (value in colnames(Counts)) {
clusterList = as.vector(strsplit(value, '[.]'))
clusterString = clusterList[[1]][1]
firstChr = substr(clusterString, 1, 1)
lastChr = substr(clusterString, nchar(clusterString) - n_last + 1, nchar(clusterString))
clusterID = paste(firstChr, lastChr, sep="")
clusters <- append(clusters, clusterID)
}
clusters = factor(clusters)
clusters
coldata <- data.frame(row.names = colnames(Counts), condition)
coldata
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeq.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
# Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][1]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
coldata <- data.frame(row.names = colnames(Counts), condition)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "D", "C"))
sigs = na.omit(res)
sigs = sigs[sigs$padj < 0.05,]
df = as.data.frame(sigs)
df.top = df[(df$padj < 0.05) & (df$baseMean > 30) & (abs(df$log2FoldChange) > 0.3),]
df.top = df.top[order(df.top$log2FoldChange, decreasing = TRUE),]
df.top["symbol"] = row.names(df.top)
rlog_out <- vst(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(df.top), rownames(coldata)] #sig genes x samples
print(is.null(mat))
print(dim(mat))
colnames(mat) <- rownames(coldata)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
num_keep <- 25
keepRow <- 1:nrow(mat.scaled)
# if(nrow(mat.scaled) < num_keep*2){
#   rows_keep = keepRow
# } else {
#   # rows_keep <- c(seq(1:num_keep), seq((nrow(mat.scaled)-num_keep), nrow(mat.scaled)))
#   rows_keep = c(head(keepRow, num_keep), tail(keepRow, num_keep))
#   rows_keep
# }
l2_val <- as.matrix(df.top[rows_keep,]$log2FoldChange) #getting log2 value for each gene we are keeping
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "D", "C"))
sigs = na.omit(res)
sigs = sigs[sigs$padj < 0.05,]
df = as.data.frame(sigs)
df.top = df[(df$padj < 0.05) & (df$baseMean > 30) & (abs(df$log2FoldChange) > 0.3),]
df.top = df.top[order(df.top$log2FoldChange, decreasing = TRUE),]
df.top["symbol"] = row.names(df.top)
rlog_out <- vst(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(df.top), rownames(coldata)] #sig genes x samples
print(is.null(mat))
print(dim(mat))
colnames(mat) <- rownames(coldata)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
num_keep <- 25
rows_keep = c(head(keepRow, num_keep), tail(keepRow, num_keep))
l2_val <- as.matrix(df.top[rows_keep,]$log2FoldChange) #getting log2 value for each gene we are keeping
colnames(l2_val)<-"logFC"
mean <- as.matrix(df.top[rows_keep,]$baseMean) #getting mean value for each gene we are keeping
colnames(mean)<-"AveExpr"
#maps values between b/w/r for min and max l2 values
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
#maps between 0% quantile, and 75% quantile of mean values --- 0, 25, 50, 75, 100
col_AveExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2), height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled[rows_keep,], cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = F)
h2 <- Heatmap(l2_val, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(l2_val[i, j],2), x, y)
})
h3 <- Heatmap(mean, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name = "AveExpr", col=col_AveExpr,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(mean[i, j],2), x, y)
})
h<-h1+h2+h3
h
fileOutputPDF = "./outputPDFs/DiffExpOut/Heatmap All Genes.pdf"
pdf(file = fileOutputPDF, width = 30, height = 10)
print(h)
dev.off()
write.csv(df.top,fileOutputCSV)
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeq.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
# Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][1]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
coldata <- data.frame(row.names = colnames(Counts), condition)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "D", "C"))
sigs = na.omit(res)
sigs = sigs[sigs$padj < 0.05,]
df = as.data.frame(sigs)
df.top = df[(df$padj < 0.05) & (df$baseMean > 30) & (abs(df$log2FoldChange) > 0.3),]
df.top = df.top[order(df.top$log2FoldChange, decreasing = TRUE),]
df.top["symbol"] = row.names(df.top)
rlog_out <- vst(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(df.top), rownames(coldata)] #sig genes x samples
print(is.null(mat))
print(dim(mat))
colnames(mat) <- rownames(coldata)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
num_keep <- 25
rows_keep = c(head(keepRow, num_keep), tail(keepRow, num_keep))
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeq.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
# Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][1]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
coldata <- data.frame(row.names = colnames(Counts), condition)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "D", "C"))
sigs = na.omit(res)
sigs = sigs[sigs$padj < 0.05,]
df = as.data.frame(sigs)
df.top = df[(df$padj < 0.05) & (df$baseMean > 30) & (abs(df$log2FoldChange) > 0.3),]
df.top = df.top[order(df.top$log2FoldChange, decreasing = TRUE),]
df.top["symbol"] = row.names(df.top)
rlog_out <- vst(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(df.top), rownames(coldata)] #sig genes x samples
print(is.null(mat))
print(dim(mat))
colnames(mat) <- rownames(coldata)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
num_keep <- 25
keepRow <- 1:nrow(mat.scaled)
rows_keep = c(head(keepRow, num_keep), tail(keepRow, num_keep))
l2_val <- as.matrix(df.top[rows_keep,]$log2FoldChange) #getting log2 value for each gene we are keeping
colnames(l2_val)<-"logFC"
mean <- as.matrix(df.top[rows_keep,]$baseMean) #getting mean value for each gene we are keeping
colnames(mean)<-"AveExpr"
#maps values between b/w/r for min and max l2 values
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
#maps between 0% quantile, and 75% quantile of mean values --- 0, 25, 50, 75, 100
col_AveExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2), height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled[rows_keep,], cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = F)
h2 <- Heatmap(l2_val, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(l2_val[i, j],2), x, y)
})
h3 <- Heatmap(mean, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name = "AveExpr", col=col_AveExpr,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(mean[i, j],2), x, y)
})
h<-h1+h2+h3
h
fileOutputPDF = "./outputPDFs/DiffExpOut/HeatmapAllGenes.pdf"
fileOutputCSV = "./outputPDFs/DiffExpOut/HeatmapAll Genes.csv"
pdf(file = fileOutputPDF, width = 30, height = 10)
print(h)
dev.off()
write.csv(df.top,fileOutputCSV)
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
library(circlize)
library(ComplexHeatmap)
options(scipen = 100)
Counts = read.delim("./output/rawCountsDESeq.csv", header = TRUE, row.names = 1, sep = ",")
Counts
newOrder = sort(colnames(Counts))
Counts <- Counts[, newOrder]
Counts
Counts <- Counts[which(rowSums(Counts) > 50),]
# Counts = Counts+1
Counts
# condition <- factor(c("C", "C", "C", "D", "D"))
condition = c()
for (value in colnames(Counts)) {
firstValues = as.vector(strsplit(value, '[_]'))
clusterStrings = firstValues[[1]][1]
condition <- append(condition, substr(clusterStrings,1,1))
}
condition = factor(condition)
condition
coldata <- data.frame(row.names = colnames(Counts), condition)
coldata
fullColData <- coldata
fullCounts <- Counts
i = 0
dds = DESeqDataSetFromMatrix(countData = Counts, colData = coldata, design = ~condition)
dds = DESeq(dds)
res = results(dds, contrast = c("condition", "D", "C"))
sigs = na.omit(res)
sigs = sigs[sigs$padj < 0.05,]
df = as.data.frame(sigs)
df.top = df[(df$padj < 0.05) & (df$baseMean > 50) & (abs(df$log2FoldChange) > 2),]
df.top = df.top[order(df.top$log2FoldChange, decreasing = TRUE),]
df.top["symbol"] = row.names(df.top)
rlog_out <- vst(dds, blind=FALSE) #get normalized count data from dds object
mat<-assay(rlog_out)[rownames(df.top), rownames(coldata)] #sig genes x samples
print(is.null(mat))
print(dim(mat))
colnames(mat) <- rownames(coldata)
base_mean <- rowMeans(mat)
mat.scaled <- t(apply(mat, 1, scale)) #center and scale each column (Z-score) then transpose
colnames(mat.scaled)<-colnames(mat)
num_keep <- 25
keepRow <- 1:nrow(mat.scaled)
rows_keep = c(head(keepRow, num_keep), tail(keepRow, num_keep))
l2_val <- as.matrix(df.top[rows_keep,]$log2FoldChange) #getting log2 value for each gene we are keeping
colnames(l2_val)<-"logFC"
mean <- as.matrix(df.top[rows_keep,]$baseMean) #getting mean value for each gene we are keeping
colnames(mean)<-"AveExpr"
#maps values between b/w/r for min and max l2 values
col_logFC <- colorRamp2(c(min(l2_val),0, max(l2_val)), c("blue", "white", "red"))
#maps between 0% quantile, and 75% quantile of mean values --- 0, 25, 50, 75, 100
col_AveExpr <- colorRamp2(c(quantile(mean)[1], quantile(mean)[4]), c("white", "red"))
ha <- HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2), height = unit(2, "cm")))
h1 <- Heatmap(mat.scaled[rows_keep,], cluster_rows = F,
column_labels = colnames(mat.scaled), name="Z-score",
cluster_columns = F)
h2 <- Heatmap(l2_val, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name="logFC", top_annotation = ha, col = col_logFC,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(l2_val[i, j],2), x, y)
})
h3 <- Heatmap(mean, row_labels = df.top$symbol[rows_keep],
cluster_rows = F, name = "AveExpr", col=col_AveExpr,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
grid.text(round(mean[i, j],2), x, y)
})
h<-h1+h2+h3
h
fileOutputPDF = "./outputPDFs/DiffExpOut/HeatmapAllGenes.pdf"
fileOutputCSV = "./outputPDFs/DiffExpOut/HeatmapAll Genes.csv"
pdf(file = fileOutputPDF, width = 30, height = 10)
print(h)
dev.off()
write.csv(df.top,fileOutputCSV)
