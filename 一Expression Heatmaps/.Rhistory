gr = unique(t1$group)
# generate logistic regression models for all clusters in vs not in cluster
lmerTest_list = lapply(cl, function(cl) {
t2 = meta
t2$in_clustX = t2$cluster_name == cl
mod1 = lmerTest::lmer(in_clustX~group+(1|sample), data=t2)
return(mod1)
})
names(lmerTest_list) = cl
# extract test statistics from models, perform multiple testing correction (BH)
t3 = NULL
for (i in cl){
t4 = as.data.frame(summary(lmerTest_list[[i]])$coefficients)
t5 = as_tibble(cbind(comp = rownames(t4), t4))
t3 = as_tibble(rbind(t3, cbind(cluster = i, t5)))
}
t4 = t3[t3$comp != "(Intercept)",]
t4$padj = p.adjust(t4$`Pr(>|t|)`, method = "BH")
lmerTest_out = t4
write_csv(t4, paste0(out_dir2,"/R05_fract_sample_in_cluster_lmerTest.csv"))
## standard t-tests
t1 = stat_tab
cl = unique(t1$cluster)
t2 = tibble(cluster = cl, p = NA, padj = NA)
for (i in cl){
t4 = t1[t1$cluster == i,]
t5 = pairwise.t.test(t4$fract_sample, t4$group, p.adjust.method = "none")
t2$p[t2$cluster == i] = t5$p.value[1,1]
}
t2$padj = p.adjust(t2$p, method = "BH")
write_csv(t2, paste0(out_dir2,"/R05_fract_sample_in_cluster_t-Test.csv"))
################################################################
# extract pseudobulk count data for DEG analysis
################################################################
###create pseudobulk dataset
create_pseudobulk = function(seur, sample, clust){
#extract cells of sample and closest to stage_center
meta = seur@meta.data
t1 = meta[meta$sample == sample & meta$cluster_name == clust,]
bulk_cells = rownames(t1)
### extract count matrix and SCT normalised matrix for stage cells and create pseudobulk
m1 = seur@assays$RNA@counts
m2 = m1[,bulk_cells]
pseudobulk_count = apply(as.matrix(m2), 1, sum)
### create list object with count vector, cell_ids, sample, pseudotime stage
pseudobulk = list(sample = sample,
clust = clust,
count = pseudobulk_count,
cell_ids = bulk_cells)
return(pseudobulk)
}
### extract pseudobulk data for expression for all samples and clusters
l1 = lapply(cluster_names, function(x){
l2 = lapply(samples, function(y){
l3 = create_pseudobulk(seur = seur, sample = y,
clust = x)
return(l3)
})
names(l2) = samples
message("Processed cluster ", x)
return(l2)
})
names(l1) = cluster_names
#flatten list for easier data extraction
pseudobulk_list = unlist(l1, recursive = F)
save(pseudobulk_list, file = paste0(out_dir2, "R05_pseudobulk_list.rda"))
### create pseudobulk metadata table
meta_b = tibble(pseudobulk = names(pseudobulk_list), sample = NA, group = NA, clust = NA, N_cells = NA)
for (i in names(pseudobulk_list)){
l1 = pseudobulk_list[[i]]
meta_b$sample[meta_b$pseudobulk == i] = l1$sample
meta_b$clust[meta_b$pseudobulk == i] = l1$clust
meta_b$N_cells[meta_b$pseudobulk == i] = length(l1$cell_ids)
}
meta_b$group = gr_tab$group[match( meta_b$sample, gr_tab$sample)]
# meta_b = meta_b[order(meta_b$clust, meta_b$group, meta_b$sample),]
### create count matrix from pseudobulk list
#remove pseudobulks with <20 cells and clusters containing less than 2 samples per group
t1 = meta_b[meta_b$N_cells>=1,]
t2 = t1 %>% group_by(clust, group) %>% summarise(N_samples = n())
t3 = t2 %>% group_by(clust) %>% summarise(N_groups = n(), min_samples = min(N_samples))
t4 = t3[t3$N_groups>=2 & t3$min_samples>=2,]
meta_b_cleaned = t1[t1$clust %in% t4$clust,]
pseudobulk_list_cleaned = pseudobulk_list[names(pseudobulk_list)%in% meta_b_cleaned$pseudobulk]
# create combined pseudobulk count table and table with average counts/cell in each pseudobulk
m1 = matrix(nrow = length(pseudobulk_list_cleaned[[1]]$count), ncol = length(pseudobulk_list_cleaned),
dimnames = list(gene = names(pseudobulk_list_cleaned[[1]]$count), meta_b_cleaned$pseudobulk) )
m_fract_exp = m1
for (i in names(pseudobulk_list_cleaned)){
v1 = pseudobulk_list_cleaned[[i]]$count
m1[,i] = v1
m_fract_exp[,i] = v1/meta_b_cleaned$N_cells[meta_b_cleaned$pseudobulk == i]
}
# remove genes with low expression (expressed in <20% of cells in all clusters/samples )
v2 = apply(m_fract_exp, 1, max)
m2 = m1[v2 >= 0.2,]
count_mat_b = m2
### merge pseudobulk expression data in single dataset
bulk_data = list(meta = meta_b_cleaned, count_mat = count_mat_b)
save(bulk_data, file = paste0(out_dir2,"R05_pseudobulk_dataset_cleaned.rda"))
#################################################
# DEG analysis for count data with DESeq2
#################################################
t1 = bulk_data$meta
m1 = bulk_data$count_mat
rownames(t1) = t1$pseudobulk
m2 = m1[,t1$pseudobulk]
# merge cluster+group for DESeq model factor (comp)
t1$comp = paste0(t1$clust,"_", t1$group)
dds = DESeqDataSetFromMatrix(m2, colData = t1, design = ~ comp)
dds = DESeq(dds)
bulk_data$dds = dds
# extract DEseq results stats for DS vs CON for each cluster
clusts = unique(t1$clust)
res_list = lapply(clusts, function(x){
v1 = unique(t1$comp[t1$clust == x])
dds_res1 = as.data.frame(results(dds, contrast=c("comp", v1)))
return(dds_res1)
})
names(res_list) = clusts
bulk_data$deseq_results = res_list
# extract up/down genes for DS vs CON for each cluster
genes_up = lapply(res_list, function(res){
t1 = res[!is.na(res$padj),]
t1 = t1[t1$log2FoldChange<=-0.3 & t1$padj <=0.05, ]
return(rownames(t1))
})
names(genes_up) = paste0(names(genes_up) , "_DS_up")
genes_down = lapply(res_list, function(res){
t1 = res[!is.na(res$padj),]
t1 = t1[t1$log2FoldChange>=0.3 & t1$padj <=0.05, ]
return(rownames(t1))
})
names(genes_down) = paste0(names(genes_down) , "_DS_down")
l1 = c(genes_up, genes_down)
l1 = l1[order(names(l1))]
bulk_data$DEG = l1
#extract mean-centered log2 transformed expr data
ntd = normTransform(dds)
m1 = assay(ntd)
m2 = m1 - apply(m1, 1, mean)
bulk_data$deseq_log_matrix = m2
save(bulk_data, file = paste0(out_dir2,"R05_pseudobulk_dataset_cleaned.rda"))
### create DEG stats and save individual genes (includeing separately TFs and HSA21 genes)
l1 = bulk_data$DEG
l2 = lapply(l1, intersect, GOI$TF)
names(l2) = paste0(names(l1), "_TFs")
l3 = lapply(l1, intersect, GOI$HSA21)
names(l3) = paste0(names(l1), "_HSA21")
l1 = c(l1, l2, l3)
t1 = tibble(cluster = names(l1), N_genes = lengths(l1))
write_csv(t1, file = paste0(out_dir2, "R05_diff_genes_DS_vs_CON_N_genes.csv"))
m1 = matrix(nrow = max(lengths(l1)), ncol = length(l1))
colnames(m1) = names(l1)
for (i in names(l1)){
v1 = l1[[i]]
if (length(v1) > 0){
m1[1:length(v1),i] = v1
}
}
m1[is.na(m1)] = ""
t1 = as_tibble(m1)
write_csv(t1, file = paste0(out_dir2, "R05_diff_genes_DS_vs_CON_genes.csv"))
#############################################################
### plot pseudobulk expression heatmaps of selected genes
#############################################################
#     mean centered expression by sample and cluster
#         group mean for each cluster
#         relative expression DS vs CON
#         p value, adjusted p value with 0.05 cutoff
#############################################################
### calculate expression values for DESeq expression
t1 = bulk_data$meta
clusts = unique(t1$clust)
gr = unique(t1$group)
l1 = lapply(gr, function(gr){
m1 =  bulk_data$deseq_log_matrix[,t1$pseudobulk[t1$group == gr]]
l2 = lapply(clusts, function(x){
m2 = m1[,intersect(colnames(m1), t1$pseudobulk[t1$clust == x])]
m2 = apply(m2, 1, mean)
return(m2)
})
names(l2) = clusts
t3 = as.data.frame(l2)
return(t3)
})
names(l1) = gr
l1$CON = as.matrix(l1$CON)
l1$DS = as.matrix(l1$DS)
l1$DELTA = l1$DS-l1$CON
bulk_data$deseq_by_group_clust = l1
### create stat matrices for DESeq analysis
# -log10(p) matrix
l1 = lapply(clusts, function(x){
x = as.character(x)
v1 = bulk_data$deseq_results[[x]]$pvalue
names(v1) = rownames(bulk_data$deseq_results[[x]])
return(v1)
})
names(l1) = clusts
m1 = as.matrix(as.data.frame(l1))
bulk_data$deseq_by_group_clust$log10p = -log10(m1)
# -log10(padj) matrix (cutoff < -log10(0.05) and NAs as 0)
l1 = lapply(clusts, function(x){
x = as.character(x)
v1 = bulk_data$deseq_results[[x]]$padj
names(v1) = rownames(bulk_data$deseq_results[[x]])
return(v1)
})
names(l1) = clusts
m1 = as.matrix(as.data.frame(l1))
m2 = -log10(m1)
m2[m2 <= -log10(0.05)] = 0
m2[is.na(m2)] = 0
bulk_data$deseq_by_group_clust$log10padj = m2
save(bulk_data, file = paste0(out_dir2,"R05_pseudobulk_dataset_cleaned.rda"))
#################################################
# plots for gene expression by cluster
#################################################
### function to plot nice heatmaps
#     return pheatmap object to allow to reconstruct gene order from clustering
plot_heatmap = function(mat, genes = rownames(mat), cluster_rows = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(250),
fontsize = 10, cellheight = 10, cellwidth = 10, lim = NULL,
annotation_col = NA, main = ""){
m2 = mat[match(genes, rownames(mat), nomatch = 0),]
#define heatmap layout parameters
if (is.null(lim)){
lim = range(na.omit(m2))
if (lim[1] == lim[2]){lim = c(0, 1)} #else can't plot matrices with all values equal
}
#plot
pl1 = pheatmap(m2, show_rownames=TRUE, cluster_rows = cluster_rows,
cluster_cols = FALSE, show_colnames = TRUE,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D2",
treeheight_row = 50,
color = color,
breaks = seq(lim[1], lim[2], length.out = length(color)+1),
border_color = NA, fontsize = fontsize,
cellwidth = cellwidth, cellheight = cellheight,
annotation_col = annotation_col,
main = main
)
return(pl1)
}
### function to plot gene expression from pseudobulk:
#       individual samples, control group mean, deviation DS vs CON, -log10(p), -log10(padj)
plot_cluster_diff_expr = function(bulk_data, pl_genes,
file = "clust_diff_expr.pdf"){
# extract metadata and sct data
meta = bulk_data$meta
m_sample = bulk_data$deseq_log_matrix[intersect(rownames(bulk_data$deseq_log_matrix), pl_genes),]
l1 = bulk_data$deseq_by_group_clust
# plot settings (plot and cell dimensions, common range for expression values, annotations)
ng = length(pl_genes)
if (ng<30){cellheight = 10}else if (ng<60){cellheight = 5} else {cellheight = 300/ng}
if (ng<30){fontsize = 10}else if (ng<60){fontsize = 5} else {fontsize = 10}
v1 = max(abs(m_sample))
lim_expr = c(-v1, v1)*0.8
annotation_col = as.data.frame(meta[,c("group", "clust")])
rownames(annotation_col) = meta$pseudobulk
pdf(file = file,
width = ncol(m_sample)/3+2, height = nrow(m_sample)*cellheight/40+2)
{
p1 = plot_heatmap(m_sample, genes = pl_genes, cluster_rows = TRUE,
color = viridis_pal(option = "viridis")(250),
fontsize = fontsize, cellheight = cellheight, cellwidth = 10, lim = lim_expr,
annotation_col = annotation_col,
main = "Norm Expr by Sample")
pl_genes_clust =p1$tree_row$labels[p1$tree_row$order]
write.csv(pl_genes_clust, "./thisIsATest.csv", row.names=FALSE)
plot_heatmap(l1$CON, genes = pl_genes_clust, cluster_rows = FALSE,
color = viridis_pal(option = "viridis")(250),
fontsize = fontsize, cellheight = cellheight, cellwidth = 10, lim = lim_expr,
main = "CON Mean Expr by cluster")
plot_heatmap(l1$DS, genes = pl_genes_clust, cluster_rows = FALSE,
color = viridis_pal(option = "viridis")(250),
fontsize = fontsize, cellheight = cellheight, cellwidth = 10, lim = lim_expr,
main = "DS Mean Expr by cluster")
plotClusterDifference = plot_heatmap(l1$DELTA, genes = pl_genes_clust, cluster_rows = TRUE,
color = colorRampPalette(c("magenta", "black", "yellow"))(250),
fontsize = fontsize, cellheight = cellheight, cellwidth = 10, lim = c(-2,2),
main = "DS vs CON Expr by cluster")
dataframePlot = l1$DELTA
write.csv(dataframePlot, "./geneOrderDataframe.csv", row.names=TRUE)
plotDifferenceOrder = plotClusterDifference$tree_row$labels[plotClusterDifference$tree_row$order]
# write.csv(plotDifferenceOrder, "./geneOrderDifference.csv", row.names=FALSE)
plot_heatmap(l1$log10p, genes = pl_genes_clust, cluster_rows = FALSE,
color = viridis_pal(option = "magma")(250),
fontsize = fontsize, cellheight = cellheight, cellwidth = 10,
main = "-log10(p) Expr by cluster")
plot_heatmap(l1$log10padj, genes = pl_genes_clust, cluster_rows = FALSE,
color = viridis_pal(option = "magma")(250),
fontsize = fontsize, cellheight = cellheight, cellwidth = 10,
main = "-log10(padj) Expr by cluster")
}
dev.off()
}
### load cleaned pseudobulk data with stats
load(file = paste0(out_dir2,"R05_pseudobulk_dataset_cleaned.rda"))
### plot selected gene sets
# all differentially expressed genes (and top50 by p value)
# all and all diff HSA21 genes
# all diff TFs (and top30 by p value)
t1 = bulk_data$DEG
deg = unique(unlist(t1))
plot_cluster_diff_expr(bulk_data, deg,
file = paste0(out_dir2,"05_heatmaps_all_diff_genes.pdf"))
# v1 = GOI$HSA21
# plot_cluster_diff_expr(bulk_data, v1,
#                        file = paste0(out_dir2,"05_heatmaps_HSA21_genes.pdf"))
#
# v1 = intersect(deg, GOI$HSA21)
# plot_cluster_diff_expr(bulk_data, v1,
#                        file = paste0(out_dir2,"05_heatmaps_HSA21_diff_genes.pdf"))
#
# v1 = intersect(deg, GOI$TF)
# plot_cluster_diff_expr(bulk_data, v1,
#                        file = paste0(out_dir2,"05_heatmaps_diff_TFs.pdf"))
#
# # extract genes with top p values
# t1 = bulk_data$deseq_by_group_clust$log10p
# t2 = apply(t1,1,max)
# max_log10p = t2[order(-t2)]
#
# v1 = names(max_log10p)[1:50]
# plot_cluster_diff_expr(bulk_data, v1,
#                        file = paste0(out_dir2,"05_heatmaps_diff_genes_top50.pdf"))
#
# v1 = intersect(names(max_log10p), GOI$TF)[1:30]
# plot_cluster_diff_expr(bulk_data, v1,
#                        file = paste0(out_dir2,"05_heatmaps_diff_TFs_top30.pdf"))
#################################################
### GO analysis of DEG
#################################################
GO_dir = paste0(out_dir2,"/05_GO_DEG/")
if (!dir.exists(GO_dir)) {dir.create(GO_dir)}
#get DEG
GO_genes_list = bulk_data$DEG
comp = names(GO_genes_list)
#perform GO analysis
ego_list = lapply(comp, function(comp){
ego = enrichGO(gene         = GO_genes_list[[comp]],
OrgDb         = org.Hs.eg.db,
keyType       = 'SYMBOL',
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
message(paste0("completed GO analysis ", comp))
return(ego)
})
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
expressionMatrix
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[-c(X)]
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[-c("X")]
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix
genesToKeep <- read.csv(file = './geneOrderOrder.csv')
genesToKeep <- read.csv(file = './geneOrderDifference.csv')
genesToKeep <- read.csv(file = './geneOrderDifference.csv')
genesToKeep
genesToKeep <- read.csv(file = './geneOrderDifference.csv')
genesToKeep$x
genesToKeep <- read.csv(file = './geneOrderDifference.csv')$x
genesToKeep
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix[expressionMatrix$ID == genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
genesToKeep <- read.csv(file = './geneOrderDifference.csv')$x
genesToKeep
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix[expressionMatrix$X == genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[expressionMatrix$X == genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[expressionMatrix$X %in% genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
genesToKeep <- read.csv(file = './geneOrderDifference.csv')$x
genesToKeep
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[expressionMatrix$X %in% genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix <- expressionMatrix[order(avg),]
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix <- expressionMatrix[order(avg)]
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix <- expressionMatrix[order(expressionMatrix$avg),]
expressionMatrix
positiveGenes = expressionMatrix[expressionMatrix$avg >= 0.6]
positiveGenes = expressionMatrix$avg[expressionMatrix$avg >= 0.6]
positiveGenes
positiveGenes = expressionMatrix[expressionMatrix$avg >= 0.6]
positiveGenes = expressionMatrix[avg >= 0.6]
positiveGenes = expressionMatrix[expressionMatrix$avg >= 0.6,]
positiveGenes
positiveGenes = rownames(expressionMatrix[expressionMatrix$avg >= 0.6,])
positiveGenes
positiveGenes = rownames(expressionMatrix[expressionMatrix$avg >= 0.6,])
positiveGenes
negativeGenes = rownames(expressionMatrix[expressionMatrix$avg <= 1,])
negativeGenes
positiveGenes = rownames(expressionMatrix[expressionMatrix$avg >= 0.6,])
positiveGenes
negativeGenes = rownames(expressionMatrix[expressionMatrix$avg <= -1,])
negativeGenes
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("clusterProfiler")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("AnnotationDbi")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
genesToKeep <- read.csv(file = './geneOrderDifference.csv')$x
genesToKeep
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[expressionMatrix$X %in% genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix <- expressionMatrix[order(expressionMatrix$avg),]
expressionMatrix
positiveGenes = rownames(expressionMatrix[expressionMatrix$avg >= 0.6,])
positiveGenes
negativeGenes = rownames(expressionMatrix[expressionMatrix$avg <= -1,])
negativeGenes
# NegativeGenes Genes
GO_results <- enrichGO(gene = negativeGenes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
print(GO_results)
negativeResults = as.data.frame(GO_results)
negativeResults
# PositiveGenes Genes
GO_results <- enrichGO(gene = positiveGenes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
print(GO_results)
positiveResults = as.data.frame(GO_results)
positiveResults
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("clusterProfiler")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("AnnotationDbi")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
genesToKeep <- read.csv(file = './geneOrderDifference.csv')$x
genesToKeep
expressionMatrix <- read.csv(file = './geneOrderDataframe.csv')
rownames(expressionMatrix) = expressionMatrix$X
expressionMatrix = expressionMatrix[expressionMatrix$X %in% genesToKeep, ]
expressionMatrix = expressionMatrix[ , !(names(expressionMatrix) %in% c("X"))]
expressionMatrix
expressionMatrix$avg = rowMeans(expressionMatrix)
expressionMatrix <- expressionMatrix[order(expressionMatrix$avg),]
expressionMatrix
positiveGenes = rownames(expressionMatrix[expressionMatrix$avg >= 0,])
positiveGenes
negativeGenes = rownames(expressionMatrix[expressionMatrix$avg <= 0,])
negativeGenes
# NegativeGenes Genes
GO_results <- enrichGO(gene = negativeGenes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
print(GO_results)
negativeResults = as.data.frame(GO_results)
negativeResults
# PositiveGenes Genes
GO_results <- enrichGO(gene = positiveGenes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
print(GO_results)
positiveResults = as.data.frame(GO_results)
positiveResults
